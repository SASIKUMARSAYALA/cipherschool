// Task 1: Person and Employee using inheritance
class Person {
    String name;
    int age;

    // Constructor for Person
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

class Employee extends Person {
    int employeeId;
    double salary;

    // Constructor for Employee
    public Employee(String name, int age, int employeeId, double salary) {
        super(name, age); // call parent constructor
        this.employeeId = employeeId;
        this.salary = salary;
    }

    // Method to display employee details
    public void displayDetails() {
        System.out.println("Employee Details:");
        System.out.println("Name       : " + name);
        System.out.println("Age        : " + age);
        System.out.println("Employee ID: " + employeeId);
        System.out.println("Salary     : â‚¹" + salary);
        System.out.println("---------------------------");
    }
}

// Task 2: Vehicle base class with overridden start() methods
class Vehicle {
    public void start() {
        System.out.println("Vehicle is starting...");
    }
}

class Car extends Vehicle {
    @Override
    public void start() {
        System.out.println("Car starts with a key or push button.");
    }
}

class Bike extends Vehicle {
    @Override
    public void start() {
        System.out.println("Bike starts with a kick or self-starter.");
    }
}

// Main class to demonstrate both tasks
public class Main {
    public static void main(String[] args) {
        // --- Task 1: Employee object ---
        Employee emp = new Employee("Sasikumar", 23, 1001, 45000.00);
        emp.displayDetails();

        // --- Task 2: Vehicle start() overrides ---
        Vehicle myCar = new Car();
        Vehicle myBike = new Bike();

        System.out.println("Starting vehicles:");
        myCar.start();
        myBike.start();
    }
}

